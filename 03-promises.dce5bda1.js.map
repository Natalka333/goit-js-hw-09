{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SACxBD,SAASC,cAAc,uBACnBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,wBAC7BD,SAASC,cAAc,yBA8BrC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEpBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAEpBA,E,IArCPL,EAAOc,iBAAiB,SAExB,SAA0BC,GACxBA,EAAMC,iBAQN,IANA,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBJ,MAAOQ,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEjBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAEvBG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EACrCzB,EAAcyB,EAAGL,GACdM,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAU2B,EAAKD,EAALjB,MACjBmB,EAAAlC,GAASmC,OAAOC,QACd,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAN,G,IAAG1B,EAAQ0B,EAAR1B,SAAUiC,EAAKP,EAALjB,MAClBmB,EAAAlC,GAASmC,OAAOK,QACd,sBAAqCH,OAAf/B,EAAS,QAAY+B,OAANE,EAAM,M,IAGjDd,GAAcG,EACdX,EAAMG,cAAcqB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nconst btnEl = document.querySelector('button[type=\"submit\"]');\n\nformEl.addEventListener('click', handleCreateProm);\n\nfunction handleCreateProm(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  let inputDelay = Number(delay.value);\n  let inputStep = Number(step.value);\n  let inputAmount = Number(amount.value);\n\n  for (let i = 1; i <= inputAmount; i += 1) {\n    createPromise(i, inputDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    inputDelay += inputStep;\n    event.currentTarget.reset();\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay4","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","inputDelay","Number","value","inputStep1","inputAmount1","i","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure","reset"],"version":3,"file":"03-promises.dce5bda1.js.map"}